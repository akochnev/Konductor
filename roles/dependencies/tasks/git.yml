---
####### Clone Git Dependencies
# name: '{{ ansible_name_module }} | stat | Check for Git Clone Lockfile'
# stat:
#   path: '{{ dir_ansible }}/clone.date'  
# register: git_clone_check

- name: '{{ ansible_name_module }} | git:clone | Clone Git Dependencies' 
  git:
    clone: yes
    version: "{{ item.branch }}"
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    update: true
#   key_file: "{{ item.key_file }}"
  with_items:
    - "{{ ansiblerepos }}"
    - "{{ terraformrepos }}"
# when:
#   - git_clone_check.stat.exists == False

# name: '{{ ansible_name_module }} | Place Git Clone Lock {{ dir_ansible }}/clone.date' 
# copy: 
#   content: "{{ lookup('pipe', 'date +%Y%m%d-%H%M') }}"
#   dest: '{{ dir_ansible }}/clone.date'

- name: '{{ ansible_name_module }} | shell:terraform.init | Initilize terraform modules'
  shell: 
    cmd: terraform init
    chdir: "{{ item.dest }}"
  with_items:
    - "{{ terraformrepos }}"

# name: '{{ ansible_name_module }} | shell:git.pull | Git Pull latest' 
# shell:
#   chdir: "{{ item.dest }}"
#   cmd: git pull
# with_items:
#   - "{{ ansiblerepos }}"
#   - "{{ terraformrepos }}"
# ignore_errors: true

